@page "/Customer/edit/{Id:guid}"

@using Mc2.CrudTest.Domain.Models
@using Mc2.CrudTest.Domain.ViewModels

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Update Customer</h1>
<p>Phoen Validation Worked Only for Us (united state) Numbers </p>
<p>If Improved Counry Of Number in Front-end, Back-end could be check Validation for all country</p>
<hr />
@if (backendAnswer?.ErrorMessages?.Count > 0)
{
    <div class="backendError">
        <ul>
            @foreach (var error in backendAnswer.ErrorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
    <hr />
}
<EditForm Model="@customer" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">Firstname</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.FirstName" />
        </div>
        <ValidationMessage For="@(() => customer.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.LastName" />
        </div>
        <ValidationMessage For="@(() => customer.LastName)" />
    </div>
    <div class="mb-3">
        <label for="DateOfBirth" class="form-label">Birth</label>
        <div class="col-md-4">
            <InputDate class="form-control" @bind-Value="customer.DateOfBirth" />
        </div>
        <ValidationMessage For="@(() => customer.DateOfBirth)" />
    </div>
    <div class="mb-3">
        <label for="PhoneNumber" class="form-label">Phone Number</label>
        <div class="col-md-4">
            <InputText class="form-control" ty @bind-Value="customer.PhoneNumber" />
        </div>
        <ValidationMessage For="@(() => customer.PhoneNumber)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">E-mail</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.Email" />
        </div>
        <ValidationMessage For="@(() => customer.Email)" />
    </div>
    <div class="mb-3">
        <label for="BankAccountNumber" class="form-label">BankAccountNumber</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="customer.BankAccountNumber" />
        </div>
        <ValidationMessage For="@(() => customer.BankAccountNumber)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="GoToCustomer">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }

    protected Customer customer = new();
    protected ResultWithDataViewModel<Customer> getDatabackendAnswer = new();
    protected ResultViewModel backendAnswer = new();

    protected override async Task OnParametersSetAsync()
    {
        getDatabackendAnswer = await Http.GetFromJsonAsync<ResultWithDataViewModel<Customer>>("api/Customer/" + Id);

        customer = getDatabackendAnswer.Data;
    }

    protected async Task SaveUser()
    {
        HttpResponseMessage responseMessage = await Http.PutAsJsonAsync("api/Customer", customer);

        var jsonString = await responseMessage.Content.ReadAsStringAsync();

        backendAnswer = Newtonsoft.Json.JsonConvert.DeserializeObject<ResultViewModel>(jsonString);

        if (backendAnswer.Succeeded)
        {
            GoToCustomer();
        }
    }
    public void GoToCustomer()
    {
        NavigationManager.NavigateTo("/Customer");
    }
}